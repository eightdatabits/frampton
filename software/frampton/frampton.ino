
#include <Adafruit_DotStar.h>
// Because conditional #includes don't work w/Arduino sketches...
#include <SPI.h>         // COMMENT OUT THIS LINE FOR GEMMA OR TRINKET
//#include <avr/power.h> // ENABLE THIS LINE FOR GEMMA OR TRINKET

#define NUMPIXELS 300 // Number of LEDs in strip (16.4ft)

// Here's how to control the LEDs from any two pins:
#define DATAPIN    20
#define CLOCKPIN   21
//Adafruit_DotStar strip(NUMPIXELS, DATAPIN, CLOCKPIN, DOTSTAR_BRG);
// The last parameter is optional -- this is the color data order of the
// DotStar strip, which has changed over time in different production runs.
// Your code just uses R,G,B colors, the library then reassigns as needed.
// Default is DOTSTAR_BRG, so change this if you have an earlier strip.

// Hardware SPI is a little faster, but must be wired to specific pins
// (Arduino Uno = pin 11 for data, 13 for clock, other boards are different).
Adafruit_DotStar strip(NUMPIXELS, DOTSTAR_BRG);

void slowBreathe(Adafruit_DotStar* p_strip, uint16_t start_pixel, uint16_t num_pixels, uint8_t max_brightness, uint8_t tick);

void setup() {
  Serial.begin(9600);
  strip.begin(); // Initialize pins for output
  strip.show();  // Turn all LEDs off ASAP
  strip.setBrightness(100);
}

static const uint16_t PROGMEM SineTable[] = {
    383,385,387,390,392,394,397,399,401,404,
    406,408,411,413,415,418,420,422,425,427,
    429,432,434,436,439,441,443,446,448,450,
    453,455,457,459,462,464,466,469,471,473,
    475,478,480,482,485,487,489,491,494,496,
    498,500,502,505,507,509,511,514,516,518,
    520,522,525,527,529,531,533,535,538,540,
    542,544,546,548,550,552,554,557,559,561,
    563,565,567,569,571,573,575,577,579,581,
    583,585,587,589,591,593,595,597,599,601,
    603,605,607,608,610,612,614,616,618,620,
    622,623,625,627,629,631,632,634,636,638,
    639,641,643,645,646,648,650,651,653,655,
    656,658,660,661,663,664,666,667,669,671,
    672,674,675,677,678,680,681,683,684,685,
    687,688,690,691,692,694,695,697,698,699,
    701,702,703,704,706,707,708,709,711,712,
    713,714,715,716,718,719,720,721,722,723,
    724,725,726,727,728,729,730,731,732,733,
    734,735,736,737,738,739,739,740,741,742,
    743,743,744,745,746,746,747,748,749,749,
    750,751,751,752,752,753,754,754,755,755,
    756,756,757,757,758,758,759,759,759,760,
    760,761,761,761,762,762,762,762,763,763,
    763,763,764,764,764,764,764,764,765,765,
    765,765,765,765,765,765,765,765,765,765,
    765,765,765,765,765,764,764,764,764,764,
    764,763,763,763,763,762,762,762,762,761,
    761,761,760,760,759,759,759,758,758,757,
    757,756,756,755,755,754,754,753,752,752,
    751,751,750,749,749,748,747,746,746,745,
    744,743,743,742,741,740,739,739,738,737,
    736,735,734,733,732,731,730,729,728,727,
    726,725,724,723,722,721,720,719,718,716,
    715,714,713,712,711,709,708,707,706,704,
    703,702,701,699,698,697,695,694,692,691,
    690,688,687,685,684,683,681,680,678,677,
    675,674,672,671,669,667,666,664,663,661,
    660,658,656,655,653,651,650,648,646,645,
    643,641,639,638,636,634,632,631,629,627,
    625,623,622,620,618,616,614,612,610,608,
    607,605,603,601,599,597,595,593,591,589,
    587,585,583,581,579,577,575,573,571,569,
    567,565,563,561,559,557,554,552,550,548,
    546,544,542,540,538,535,533,531,529,527,
    525,522,520,518,516,514,511,509,507,505,
    502,500,498,496,494,491,489,487,485,482,
    480,478,475,473,471,469,466,464,462,459,
    457,455,453,450,448,446,443,441,439,436,
    434,432,429,427,425,422,420,418,415,413,
    411,408,406,404,401,399,397,394,392,390,
    387,385,383,380,378,375,373,371,368,366,
    364,361,359,357,354,352,350,347,345,343,
    340,338,336,333,331,329,326,324,322,319,
    317,315,312,310,308,306,303,301,299,296,
    294,292,290,287,285,283,280,278,276,274,
    271,269,267,265,263,260,258,256,254,251,
    249,247,245,243,240,238,236,234,232,230,
    227,225,223,221,219,217,215,213,211,208,
    206,204,202,200,198,196,194,192,190,188,
    186,184,182,180,178,176,174,172,170,168,
    166,164,162,160,158,157,155,153,151,149,
    147,145,143,142,140,138,136,134,133,131,
    129,127,126,124,122,120,119,117,115,114,
    112,110,109,107,105,104,102,101, 99, 98,
     96, 94, 93, 91, 90, 88, 87, 85, 84, 82,
     81, 80, 78, 77, 75, 74, 73, 71, 70, 68,
     67, 66, 64, 63, 62, 61, 59, 58, 57, 56,
     54, 53, 52, 51, 50, 49, 47, 46, 45, 44,
     43, 42, 41, 40, 39, 38, 37, 36, 35, 34,
     33, 32, 31, 30, 29, 28, 27, 26, 26, 25,
     24, 23, 22, 22, 21, 20, 19, 19, 18, 17,
     16, 16, 15, 14, 14, 13, 13, 12, 11, 11,
     10, 10,  9,  9,  8,  8,  7,  7,  6,  6,
      6,  5,  5,  4,  4,  4,  3,  3,  3,  3,
      2,  2,  2,  2,  1,  1,  1,  1,  1,  1,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  1,  1,  1,
      1,  1,  1,  2,  2,  2,  2,  3,  3,  3,
      3,  4,  4,  4,  5,  5,  6,  6,  6,  7,
      7,  8,  8,  9,  9, 10, 10, 11, 11, 12,
     13, 13, 14, 14, 15, 16, 16, 17, 18, 19,
     19, 20, 21, 22, 22, 23, 24, 25, 26, 26,
     27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
     37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
     47, 49, 50, 51, 52, 53, 54, 56, 57, 58,
     59, 61, 62, 63, 64, 66, 67, 68, 70, 71,
     73, 74, 75, 77, 78, 80, 81, 82, 84, 85,
     87, 88, 90, 91, 93, 94, 96, 98, 99,101,
    102,104,105,107,109,110,112,114,115,117,
    119,120,122,124,126,127,129,131,133,134,
    136,138,140,142,143,145,147,149,151,153,
    155,157,158,160,162,164,166,168,170,172,
    174,176,178,180,182,184,186,188,190,192,
    194,196,198,200,202,204,206,208,211,213,
    215,217,219,221,223,225,227,230,232,234,
    236,238,240,243,245,247,249,251,254,256,
    258,260,263,265,267,269,271,274,276,278,
    280,283,285,287,290,292,294,296,299,301,
    303,306,308,310,312,315,317,319,322,324,
    326,329,331,333,336,338,340,343,345,347,
    350,352,354,357,359,361,364,366,368,371,
    373,375,378,380};
static const size_t SineTableLength = sizeof(SineTable)/sizeof(SineTable[0]);

static const uint16_t PROGMEM GammaTable[] = {
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2,  2,  2,  3,  3,  3,
      3,  3,  3,  3,  3,  3,  3,  4,  4,  4,
      4,  4,  4,  4,  4,  5,  5,  5,  5,  5,
      5,  5,  6,  6,  6,  6,  6,  6,  7,  7,
      7,  7,  7,  7,  8,  8,  8,  8,  8,  9,
      9,  9,  9,  9,  9, 10, 10, 10, 10, 11,
     11, 11, 11, 11, 12, 12, 12, 12, 13, 13,
     13, 13, 13, 14, 14, 14, 14, 15, 15, 15,
     15, 16, 16, 16, 17, 17, 17, 17, 18, 18,
     18, 19, 19, 19, 19, 20, 20, 20, 21, 21,
     21, 22, 22, 22, 22, 23, 23, 23, 24, 24,
     24, 25, 25, 25, 26, 26, 27, 27, 27, 28,
     28, 28, 29, 29, 29, 30, 30, 31, 31, 31,
     32, 32, 32, 33, 33, 34, 34, 34, 35, 35,
     36, 36, 37, 37, 37, 38, 38, 39, 39, 40,
     40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
     45, 45, 45, 46, 46, 47, 47, 48, 48, 49,
     49, 50, 50, 51, 51, 52, 52, 53, 53, 54,
     54, 55, 55, 56, 56, 57, 58, 58, 59, 59,
     60, 60, 61, 61, 62, 62, 63, 64, 64, 65,
     65, 66, 66, 67, 68, 68, 69, 69, 70, 71,
     71, 72, 72, 73, 74, 74, 75, 75, 76, 77,
     77, 78, 79, 79, 80, 81, 81, 82, 83, 83,
     84, 84, 85, 86, 86, 87, 88, 89, 89, 90,
     91, 91, 92, 93, 93, 94, 95, 95, 96, 97,
     98, 98, 99,100,100,101,102,103,103,104,
    105,106,106,107,108,109,109,110,111,112,
    112,113,114,115,116,116,117,118,119,120,
    120,121,122,123,124,124,125,126,127,128,
    128,129,130,131,132,133,134,134,135,136,
    137,138,139,140,140,141,142,143,144,145,
    146,147,147,148,149,150,151,152,153,154,
    155,156,157,158,158,159,160,161,162,163,
    164,165,166,167,168,169,170,171,172,173,
    174,175,176,177,178,179,180,181,182,183,
    184,185,186,187,188,189,190,191,192,193,
    194,195,196,197,198,199,200,201,202,203,
    205,206,207,208,209,210,211,212,213,214,
    215,216,218,219,220,221,222,223,224,225,
    227,228,229,230,231,232,233,235,236,237,
    238,239,240,242,243,244,245,246,247,249,
    250,251,252,253,255,256,257,258,260,261,
    262,263,264,266,267,268,269,271,272,273,
    274,276,277,278,279,281,282,283,285,286,
    287,288,290,291,292,294,295,296,298,299,
    300,301,303,304,305,307,308,309,311,312,
    314,315,316,318,319,320,322,323,324,326,
    327,329,330,331,333,334,336,337,338,340,
    341,343,344,345,347,348,350,351,353,354,
    356,357,358,360,361,363,364,366,367,369,
    370,372,373,375,376,378,379,381,382,384,
    385,387,388,390,391,393,394,396,397,399,
    400,402,404,405,407,408,410,411,413,414,
    416,418,419,421,422,424,426,427,429,430,
    432,434,435,437,438,440,442,443,445,447,
    448,450,452,453,455,457,458,460,462,463,
    465,467,468,470,472,473,475,477,478,480,
    482,484,485,487,489,490,492,494,496,497,
    499,501,503,504,506,508,510,511,513,515,
    517,518,520,522,524,526,527,529,531,533,
    535,536,538,540,542,544,545,547,549,551,
    553,555,557,558,560,562,564,566,568,570,
    571,573,575,577,579,581,583,585,587,588,
    590,592,594,596,598,600,602,604,606,608,
    610,612,614,615,617,619,621,623,625,627,
    629,631,633,635,637,639,641,643,645,647,
    649,651,653,655,657,659,661,663,665,667,
    669,672,674,676,678,680,682,684,686,688,
    690,692,694,696,698,701,703,705,707,709,
    711,713,715,717,720,722,724,726,728,730,
    732,735,737,739,741,743,745,748,750,752,
    754,756,758,761,763,765};
static const size_t GammaTableLength = sizeof(GammaTable)/sizeof(GammaTable[0]);

// Runs 10 LEDs at a time along strip, cycling through red, green and blue.
// This requires about 200 mA for all the 'on' pixels + 1 mA per 'off' pixel.

int      head  = 0, tail = -NUMPIXELS; // Index of first 'on' and 'off' pixels
uint32_t tick = 0;
uint32_t color = 0xFFFFFF; //(DotStarGammaTable[222]<<16) /*G*/ + (DotStarGammaTable[255]<<8) /*R*/ + DotStarGammaTable[173] /*B*/;      // 'On' color (G,R,B). warm whiteRGB = #F6E7D2 (246,231,210). moccasinRGB (255,228,181). navajo whiteRGB (255,222,173)

void loop() {
  //chase(&strip);
  slowBreathe(&strip, 0, NUMPIXELS, 255, tick);
  strip.show();                     // Refresh strip
  delay(10);                        // Pause 10 milliseconds (~100 FPS)

  tick++;
}

uint32_t valueToColor(uint32_t value) {
  value = GammaTable[value];
  uint8_t common = value / 3;
  uint8_t remainder = value % 3;
  uint32_t color = (common<<16) | (common<<8) | common;
  color = ((remainder == 2)<<16) + ((remainder != 0)<<8) + color;
  //char str[48];
  //sprintf(str, "%lu,%08lx,%hhu,%hhu", value, color, common, remainder);
  //Serial.println(str);
  return color;
}

void chase(Adafruit_DotStar* p_strip) {
  p_strip->setPixelColor(head, color); // 'On' pixel at head
  p_strip->setPixelColor(tail, 0);     // 'Off' pixel at tail

  if(++head >= NUMPIXELS) {         // Increment head index.  Off end of strip?
    head = 0;                       //  Yes, reset head index to start
  }
  if(++tail >= NUMPIXELS) {
    tail = 0; // Increment, reset tail index
  }
}
void slowBreathe(Adafruit_DotStar* p_strip, uint16_t start_pixel, uint16_t num_pixels, uint8_t max_brightness, uint32_t tick) {
  uint32_t index = tick%SineTableLength;
  uint32_t value = SineTable[index];
  uint32_t color = valueToColor(value);
  (void)max_brightness;

  //char str[32];
  //sprintf(str, "%lu", index);
  //Serial.println(str);
  //uint32_t color = (GammaTable[value]<<16) + (GammaTable[value]<<8) + GammaTable[value];
  p_strip->fill(color, start_pixel, num_pixels);
}


